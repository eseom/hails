#!/usr/bin/env node
require('../tools/babel-require')

const { spawn } = require('child_process')
const fs = require('fs')
const { getSettings, path } = require('../lib/settings')
const loggerModule = require('../lib/logger').default

const logger = loggerModule({})
const command = process.argv[2]
const sequelizeCli = `${__dirname}/../node_modules/.bin/sequelize`

const getSequelizeCommand = (c) => {
  const sequelizercPath = `${process.env.PWD}/.sequelizerc`
  try {
    fs.statSync(sequelizercPath)
    return spawn(sequelizeCli, [
      c,
      ...process.argv.slice(3),
    ])
  } catch (e) {
    if (typeof getSettings().database === 'undefined') {
      console.error(`
--[ hails error ]--

settings file location: ${path}
no database settings

See the Sequelize manual: http://docs.sequelizejs.com/manual/installation/usage.html#options
`)
      process.exit(-4)
    }
    return spawn(sequelizeCli, [
      c,
      '--config',
      'node_modules/hails/sequelizerc.js',
      '--migrations-path',
      'db/migrations',
      '--seeders-path',
      'db/seeders',
      ...process.argv.slice(3),
    ])
  }
}

const execSequelize = (c) => {
  const call = getSequelizeCommand(c)
  call.stdout.on('data', (data) => {
    data.toString().trim().split('\n').forEach((d) => {
      logger.info(d)
    })
  })
  call.stderr.on('data', (data) => {
    data.toString().trim().split('\n').forEach((d) => {
      logger.error(d)
    })
  })
}

switch (command) {
  case 'run':
    require('../lib/runner')
    break
  case 'db:up':
    execSequelize('db:migrate')
    break
  case 'db:down':
    execSequelize('db:migrate:undo')
    break
  case 'db:status':
    execSequelize('db:migrate:status')
    break
  case 'db:create':
    execSequelize('migration:create')
    break
  case 'db:seed:up':
    execSequelize('db:seed:all')
    break
  case 'db:seed:down':
    execSequelize('db:seed:undo')
    break
  case 'db:seed:create':
    execSequelize('seed:create')
    break
  default: // command
    require('../lib/cli')
    break
}

#!/usr/bin/env node
require('../tools/babel-require')

const spawn = require('child_process').spawn
const chokidar = require('chokidar')
const Path = require('path')
const { systemLogger } = require('../lib/logger')
const hotload = require('hotload')

const command = process.argv[2]
const sequelizeCli = `${__dirname}/../node_modules/.bin/sequelize`


const execSequelize = (c) => {
  const call = spawn(sequelizeCli, [c])
  call.stdout.on('data', (data) => {
    systemLogger.info(data.toString().trim())
  })
  call.stderr.on('data', (data) => {
    systemLogger.error(data.toString().trim())
  })
}


// const watcher = chokidar.watch(Path.resolve(process.cwd(), 'src/**/*'), {

// })

// watcher.on('change', (path) => {
//   // console.log(path, require.cache)
//   // require.cache = {}
//   hotload('../lib/runner')
//   // require('../lib/runner')
//   // require(path)
// })

switch (command) {
  case 'run':
    require('../lib/runner')
    break
  case 'db:up':
    execSequelize('db:migrate')
    break
  case 'db:down':
    execSequelize('db:migrate:undo')
    break
  case 'db:status':
    execSequelize('db:migrate:status')
    break
  case 'db:create':
    execSequelize('migration:create')
    break
  case 'db:seed:up':
    execSequelize('db:seed:all')
    break
  case 'db:seed:down':
    execSequelize('db:seed:undo')
    break
  case 'db:seed:create':
    execSequelize('seed:create')
    break
  default:
    break
}
